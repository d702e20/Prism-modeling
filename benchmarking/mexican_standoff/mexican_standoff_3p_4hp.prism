// Mexican Standoff with 3 mexicans each having 4 lives

csg 

player p1
 	shooter1
endplayer

player p2
 	shooter2
endplayer

player p3
 	shooter3
endplayer

const int max_health = 4;

global health1 : [0..max_health] init max_health;
global health2 : [0..max_health] init max_health;
global health3 : [0..max_health] init max_health;

label "all_died" = health1 = 0 & health2 = 0 & health3 = 0;
label "shooter1_won" = health1 > 0 & health2 = 0 & health3 = 0;
label "shooter2_won" = health1 = 0 & health2 > 0 & health3 = 0;
label "shooter3_won" = health1 = 0 & health2 = 0 & health3 > 0;
label "alive1" = health1 > 0;
label "alive2" = health2 > 0;
label "alive3" = health3 > 0;

module shooter1
	[p1wait] true -> true;
	[p1shoot2] health1 > 0 & health2 > 0 -> true;
	[p1shoot3] health1 > 0 & health3 > 0 -> true;
endmodule

module shooter2 = shooter1 [health1 = health2, health2 = health1, p1wait = p2wait, p1shoot2 = p2shoot1, p1shoot3 = p2shoot3] endmodule
module shooter3 = shooter1 [health1 = health3, health3 = health1, p1wait = p3wait, p1shoot2 = p3shoot2, p1shoot3 = p3shoot1] endmodule

module channel
  [p1wait,p2shoot1,p3shoot1] true -> (health1' = (health1-2));
  [p1wait,p2shoot1,p3shoot2] true -> (health1' = (health1-1)) & (health2' = (health2-1));
  [p1wait,p2shoot1,p3wait] true -> (health1' = (health1-1));
  [p1wait,p2wait,p3shoot1] true -> (health1' = (health1-1));
  [p1wait,p2wait,p3shoot2] true -> (health2' = (health2-1));
  [p1wait,p2wait,p3wait] true -> true;
  [p1wait,p2shoot3,p3shoot1] true -> (health1' = (health1-1)) & (health3' = (health3-1));
  [p1wait,p2shoot3,p3shoot2] true -> (health2' = (health2-1)) & (health3' = (health3-1));
  [p1wait,p2shoot3,p3wait] true -> (health3' = (health3-1));
  [p1shoot2,p2shoot1,p3shoot1] true -> (health1' = (health1-2)) & (health2' = (health2-1));
  [p1shoot2,p2shoot1,p3shoot2] true -> (health1' = (health1-1)) & (health2' = (health2-2));
  [p1shoot2,p2shoot1,p3wait] true -> (health1' = (health1-1)) & (health2' = (health2-1));
  [p1shoot2,p2wait,p3shoot1] true -> (health1' = (health1-1)) & (health2' = (health2-1));
  [p1shoot2,p2wait,p3shoot2] true -> (health2' = (health2-2));
  [p1shoot2,p2wait,p3wait] true -> (health2' = (health2-1));
  [p1shoot2,p2shoot3,p3shoot1] true -> (health1' = (health1-1)) & (health2' = (health2-1)) & (health3' = (health3-1));
  [p1shoot2,p2shoot3,p3shoot2] true -> (health2' = (health2-2)) & (health3' = (health3-1));
  [p1shoot2,p2shoot3,p3wait] true -> (health2' = (health2-1)) & (health3' = (health3-1));
  [p1shoot3,p2shoot1,p3shoot1] true -> (health1' = (health1-2)) & (health3' = (health3-1));
  [p1shoot3,p2shoot1,p3shoot2] true -> (health1' = (health1-1)) & (health2' = (health2-1)) & (health3' = (health3-1));
  [p1shoot3,p2shoot1,p3wait] true -> (health1' = (health1-1)) & (health3' = (health3-1));
  [p1shoot3,p2wait,p3shoot1] true -> (health1' = (health1-1)) & (health3' = (health3-1));
  [p1shoot3,p2wait,p3shoot2] true -> (health2' = (health2-1)) & (health3' = (health3-1));
  [p1shoot3,p2wait,p3wait] true -> (health3' = (health3-1));
  [p1shoot3,p2shoot3,p3shoot1] true -> (health1' = (health1-1)) & (health3' = (health3-2));
  [p1shoot3,p2shoot3,p3shoot2] true -> (health2' = (health2-1)) & (health3' = (health3-2));
  [p1shoot3,p2shoot3,p3wait] true -> (health3' = (health3-2));
endmodule